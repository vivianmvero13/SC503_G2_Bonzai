/* Correr con SYS
CREATE USER USR_DB_DEV IDENTIFIED BY "dev1";
/
GRANT DBA TO USR_DB_DEV;
*/

ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE;
/

/*==============================================================================
==============================BASE DE DATOS BONZAI==============================
==============================================================================*/


/*==============================================================================
===============================CREACION TABLESPACE==============================
==============================================================================*/
-- Tamaño inicial de 100M --
-- Incrementa de 10M en 10M segun necesidad --
-- Tamaño maximo de 500M --
CREATE TABLESPACE tbl_Bonzai
        DATAFILE 'C:/ORACLE/ORADATA/XE/tbl_Bonzai.DBF'
        SIZE 100M
        AUTOEXTEND ON
        NEXT 10M
        MAXSIZE 500M;
        COMMIT;
/

/*==============================================================================
================================CREACION PERFILES===============================
==============================================================================*/
CREATE PROFILE PERFIL_TERAPIA LIMIT 
SESSIONS_PER_USER 3 
CPU_PER_SESSION UNLIMITED 
CPU_PER_CALL UNLIMITED 
CONNECT_TIME UNLIMITED 
IDLE_TIME 30 
LOGICAL_READS_PER_SESSION UNLIMITED 
LOGICAL_READS_PER_CALL UNLIMITED 
PRIVATE_SGA 20M 
FAILED_LOGIN_ATTEMPTS 5 
PASSWORD_LIFE_TIME 90 
PASSWORD_REUSE_TIME 30 
PASSWORD_REUSE_MAX UNLIMITED 
PASSWORD_LOCK_TIME DEFAULT 
PASSWORD_GRACE_TIME 5 
PASSWORD_VERIFY_FUNCTION NULL; 
/

/*==============================================================================
===========================CREACION USUARIOS Y ROLES============================
==============================================================================*/

--USER ADAM (ADMINISTRADOR)--
CREATE USER USR_ADAM IDENTIFIED BY "ad1" 
DEFAULT TABLESPACE tbl_Bonzai
PROFILE PERFIL_TERAPIA              
TEMPORARY TABLESPACE TEMP           
QUOTA UNLIMITED ON tbl_Bonzai;
/
GRANT CONNECT, RESOURCE TO USR_ADAM;
/
CREATE ROLE RL_ADMIN;
GRANT 
        CREATE SESSION, CREATE USER, CREATE TRIGGER, ALTER ANY TABLE, 
        DELETE ANY TABLE, INSERT ANY TABLE, SELECT ANY TABLE 
TO RL_ADMIN;
COMMIT;
/
--USER DIANA (DIRECTOR)--
CREATE USER USR_DIANA IDENTIFIED BY "di1" 
DEFAULT TABLESPACE tbl_Bonzai
PROFILE PERFIL_TERAPIA
TEMPORARY TABLESPACE TEMP
QUOTA UNLIMITED ON tbl_Bonzai;
/
GRANT CONNECT, RESOURCE TO USR_DIANA;
/
CREATE ROLE RL_DIRECTOR;
GRANT CREATE SESSION, INSERT ANY TABLE, SELECT ANY TABLE TO RL_DIRECTOR; 
COMMIT;
/
--USER TERRY (TERAPEUTA)--
CREATE USER USR_TERRY IDENTIFIED BY "te1" 
DEFAULT TABLESPACE tbl_Bonzai
PROFILE PERFIL_TERAPIA
TEMPORARY TABLESPACE TEMP
QUOTA UNLIMITED ON tbl_Bonzai;
/
GRANT CONNECT, RESOURCE TO USR_TERRY;
/

/*==============================================================================
===========================CREACION TABLAS E INSERTS============================
==============================================================================*/
--CREACION TABLA CLIENTE--
CREATE TABLE CLIENTE(
    ID_CLIENTE NUMBER(20)PRIMARY KEY,
    NOMBRE VARCHAR2(50)NOT NULL,
    APELLIDO VARCHAR2(50)NOT NULL,
    FECHA_NACIMIENTO DATE,
    CONTACTO VARCHAR(30),
    DIRECCION VARCHAR(50),
    VALORACION VARCHAR(50)
);
/
--INSERTS TABLA CLIENTE--
INSERT INTO CLIENTE (ID_CLIENTE, NOMBRE, APELLIDO, FECHA_NACIMIENTO, CONTACTO, DIRECCION, VALORACION)
SELECT LEVEL,
       INITCAP(DBMS_RANDOM.STRING('L', 8)),
       INITCAP(DBMS_RANDOM.STRING('L', 10)),
       TRUNC(SYSDATE - DBMS_RANDOM.VALUE(90, 25550)),
       '+506 ' || TRUNC(DBMS_RANDOM.VALUE(600000000, 899999999)),
       'Calle ' || TRUNC(DBMS_RANDOM.VALUE(1, 200)) || ' # ' || TRUNC(DBMS_RANDOM.VALUE(1, 100)),
       CASE 
           WHEN MOD(LEVEL, 3) = 0 THEN 'Categoria-A'
           WHEN MOD(LEVEL, 3) = 1 THEN 'Categoria-B'
           ELSE 'Categoria-C'
       END
FROM DUAL
CONNECT BY LEVEL <= 55;
/
--CREACION TABLA TERAPUETA--
CREATE TABLE TERAPEUTA(
    ID_TERAPEUTA NUMBER(20)PRIMARY KEY,
    CODIGO_TERAPEUTA VARCHAR(20)NOT NULL,
    NOMBRE VARCHAR2(50)NOT NULL,
    APELLIDO VARCHAR2(50) NOT NULL,
    ESPECIALIDAD VARCHAR(20),
    CONTACTO VARCHAR(15)
); 
/
--INSERTS TABLA TERAPEUTA--
INSERT INTO TERAPEUTA (ID_TERAPEUTA, CODIGO_TERAPEUTA, NOMBRE, APELLIDO, ESPECIALIDAD, CONTACTO)
SELECT LEVEL,
       'T-' || TRUNC(DBMS_RANDOM.VALUE(1000, 9999)),
       INITCAP(DBMS_RANDOM.STRING('L', 7)),
       INITCAP(DBMS_RANDOM.STRING('L', 9)),
       CASE 
           WHEN MOD(LEVEL, 4) = 0 THEN 'Fisioterapia'
           WHEN MOD(LEVEL, 4) = 1 THEN 'Terapia Lenguaje'
           ELSE 'Terapia Ocupacional'
       END,
       '+506 ' || TRUNC(DBMS_RANDOM.VALUE(600000000, 899999999))
FROM DUAL
CONNECT BY LEVEL <= 55;
/
--CREACION TABLA TERAPIA--
CREATE TABLE TERAPIA(
    ID_TERAPIA NUMBER(20)PRIMARY KEY,
    TIPO_TERAPIA VARCHAR(30),
    SESION NUMBER(20),
    COSTO NUMBER(20)
);  
/
--INSERTS TERAPIA--
INSERT INTO TERAPIA (ID_TERAPIA, TIPO_TERAPIA, SESION, COSTO)
SELECT LEVEL,
       CASE 
           WHEN MOD(LEVEL, 3) = 0 THEN 'Terapia Ocupacional'
           WHEN MOD(LEVEL, 3) = 1 THEN 'Terapia Lenguaje'
           ELSE 'Terapia Fisica'
       END,
       TRUNC(DBMS_RANDOM.VALUE(1, 10)),
       ROUND(DBMS_RANDOM.VALUE(20, 200), 2)
FROM DUAL
CONNECT BY LEVEL <= 55;
/
--CREACION TABLA CITAS--
CREATE TABLE CITAS(
    ID_CITA NUMBER(20)PRIMARY KEY,
    ID_CLIENTE NUMBER(20)REFERENCES CLIENTE(ID_CLIENTE),
    ID_TERAPEUTA NUMBER(20)REFERENCES TERAPEUTA(ID_TERAPEUTA),
    FECHA_CITA DATE NOT NULL,
    HORA_CITA TIMESTAMP NOT NULL,
    ESTADO VARCHAR2(100)
);
/
--INSERTS TABLA CITAS--
INSERT INTO CITAS (ID_CITA, ID_CLIENTE, ID_TERAPEUTA, FECHA_CITA, HORA_CITA, ESTADO)
SELECT LEVEL,
       TRUNC(DBMS_RANDOM.VALUE(1, 54)),
       TRUNC(DBMS_RANDOM.VALUE(1, 54)),
       TRUNC(SYSDATE - DBMS_RANDOM.VALUE(-30, 60)),
       TO_TIMESTAMP(TRUNC(SYSDATE - DBMS_RANDOM.VALUE(-30, 60)) + DBMS_RANDOM.VALUE(8/24, 18/24)),
       CASE 
           WHEN MOD(LEVEL, 3) = 0 THEN 'Pendiente'
           WHEN MOD(LEVEL, 3) = 1 THEN 'Confirmada'
           ELSE 'Cancelada'
       END
FROM DUAL
CONNECT BY LEVEL <= 100;
/
--CREACION TABLA PAGOS--
CREATE TABLE PAGOS(
    ID_PAGO NUMBER(20)PRIMARY KEY,
    ID_CLIENTE NUMBER(20)REFERENCES CLIENTE(ID_CLIENTE),
    MONTO NUMBER(15,2)NOT NULL,
    METODO_PAGO VARCHAR(30),
    FECHA_PAGO DATE NOT NULL,
    ESTADO_PAGO VARCHAR(30)
);
/
--INSERTS TABLA PAGOS--
INSERT INTO PAGOS (ID_PAGO, ID_CLIENTE, MONTO, METODO_PAGO, FECHA_PAGO, ESTADO_PAGO)
SELECT LEVEL,
       TRUNC(DBMS_RANDOM.VALUE(1, 54)),
       ROUND(DBMS_RANDOM.VALUE(20, 500), 2),
       CASE 
           WHEN MOD(LEVEL, 3) = 0 THEN 'Efectivo'
           WHEN MOD(LEVEL, 3) = 1 THEN 'Tarjeta'
           ELSE 'Transferencia'
       END,
       TRUNC(SYSDATE - DBMS_RANDOM.VALUE(0, 30)),
       CASE 
           WHEN MOD(LEVEL, 4) = 0 THEN 'Pagado'
           WHEN MOD(LEVEL, 4) = 1 THEN 'Pendiente'
           ELSE 'Vencido'
       END
FROM DUAL
CONNECT BY LEVEL <= 100;
/
--CREACION TABLA EXPEDIENTES--
CREATE TABLE EXPEDIENTES(
    ID_EXPEDIENTE NUMBER(20)PRIMARY KEY,
    ID_CLIENTE NUMBER(20)REFERENCES CLIENTE(ID_CLIENTE),
    FECHA DATE NOT NULL,
    DESCRIPCION VARCHAR(50),
    PROGRESO VARCHAR(50)
);
/
--INSERTS TABLA EXPEDIENTES--
INSERT INTO EXPEDIENTES (ID_EXPEDIENTE, ID_CLIENTE, FECHA, DESCRIPCION, PROGRESO)
SELECT LEVEL,
       TRUNC(DBMS_RANDOM.VALUE(1, 54)),
       TRUNC(SYSDATE - DBMS_RANDOM.VALUE(10, 100)),
       'Sesión ' || TRUNC(DBMS_RANDOM.VALUE(1, 10)),
       CASE 
           WHEN MOD(LEVEL, 3) = 0 THEN 'Mejorando'
           WHEN MOD(LEVEL, 3) = 1 THEN 'Estable'
           ELSE 'Recaída'
       END
FROM DUAL
CONNECT BY LEVEL <= 100;
/

COMMIT;
/

---CREACION ROL TERAPEUTA--
CREATE ROLE RL_TERAPEUTA;
GRANT SELECT, INSERT ON USR_TERRY.EXPEDIENTES TO RL_TERAPEUTA; 
GRANT SELECT, INSERT ON USR_TERRY.CITAS TO RL_TERAPEUTA; 
/

/*==============================================================================
==========================CREACION TABLAS DE AUDITORIA==========================
==============================================================================*/

-- Tabla AUDITORIA_CLIENTE
CREATE TABLE AUDITORIA_CLIENTE (
    ID_CLIENTE NUMBER(20),
    ACCION VARCHAR2(10),
    FECHA_AUDITORIA DATE,
    USUARIO VARCHAR2(100)
);

-- Tabla AUDITORIA_TERAPEUTA
CREATE TABLE AUDITORIA_TERAPEUTA (
    ID_TERAPEUTA NUMBER(20),
    ACCION VARCHAR2(10),
    FECHA_AUDITORIA DATE,
    USUARIO VARCHAR2(100)
);

-- Tabla AUDITORIA_TERAPIA
CREATE TABLE AUDITORIA_TERAPIA (
    ID_TERAPIA NUMBER(20),
    ACCION VARCHAR2(10),
    FECHA_AUDITORIA DATE,
    USUARIO VARCHAR2(100)
);

-- Tabla AUDITORIA_CITAS
CREATE TABLE AUDITORIA_CITAS (
    ID_CITA NUMBER(20),
    ACCION VARCHAR2(10),
    FECHA_AUDITORIA DATE,
    USUARIO VARCHAR2(100)
);

-- Tabla AUDITORIA_PAGOS
CREATE TABLE AUDITORIA_PAGOS (
    ID_PAGO NUMBER(20),
    ACCION VARCHAR2(10),
    FECHA_AUDITORIA DATE,
    USUARIO VARCHAR2(100)
);

-- Tabla AUDITORIA_EXPEDIENTES
CREATE TABLE AUDITORIA_EXPEDIENTES (
    ID_EXPEDIENTE NUMBER(20),
    ACCION VARCHAR2(10),
    FECHA_AUDITORIA DATE,
    USUARIO VARCHAR2(100)
);

-- ===========================
-- TRIGGERS DE AUDITORIA
-- ===========================

-- Triggers para CLIENTE
CREATE OR REPLACE TRIGGER trg_auditoria_cliente_insert
AFTER INSERT ON CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_CLIENTE (
        ID_CLIENTE,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_CLIENTE,
        'INSERT',
        SYSDATE,
        USER
    );
END;
/

CREATE OR REPLACE TRIGGER trg_auditoria_cliente_update
AFTER UPDATE ON CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_CLIENTE (
        ID_CLIENTE,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_CLIENTE,
        'UPDATE',
        SYSDATE,
        USER
    );
END;
/

CREATE OR REPLACE TRIGGER trg_auditoria_cliente_delete
AFTER DELETE ON CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_CLIENTE (
        ID_CLIENTE,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :OLD.ID_CLIENTE,
        'DELETE',
        SYSDATE,
        USER
    );
END;
/

-- Triggers para TERAPEUTA
CREATE OR REPLACE TRIGGER trg_auditoria_terapeuta_insert
AFTER INSERT ON TERAPEUTA
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_TERAPEUTA (
        ID_TERAPEUTA,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_TERAPEUTA,
        'INSERT',
        SYSDATE,
        USER
    );
END;
/

CREATE OR REPLACE TRIGGER trg_auditoria_terapeuta_update
AFTER UPDATE ON TERAPEUTA
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_TERAPEUTA (
        ID_TERAPEUTA,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_TERAPEUTA,
        'UPDATE',
        SYSDATE,
        USER
    );
END;
/

CREATE OR REPLACE TRIGGER trg_auditoria_terapeuta_delete
AFTER DELETE ON TERAPEUTA
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_TERAPEUTA (
        ID_TERAPEUTA,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :OLD.ID_TERAPEUTA,
        'DELETE',
        SYSDATE,
        USER
    );
END;
/


-- Trigger para INSERT en TERAPIA
CREATE OR REPLACE TRIGGER trg_auditoria_terapia_insert
AFTER INSERT ON TERAPIA
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_TERAPIA (
        ID_TERAPIA,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_TERAPIA,
        'INSERT',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para UPDATE en TERAPIA
CREATE OR REPLACE TRIGGER trg_auditoria_terapia_update
AFTER UPDATE ON TERAPIA
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_TERAPIA (
        ID_TERAPIA,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_TERAPIA,
        'UPDATE',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para DELETE en TERAPIA
CREATE OR REPLACE TRIGGER trg_auditoria_terapia_delete
AFTER DELETE ON TERAPIA
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_TERAPIA (
        ID_TERAPIA,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :OLD.ID_TERAPIA,
        'DELETE',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para INSERT en CITAS
CREATE OR REPLACE TRIGGER trg_auditoria_citas_insert
AFTER INSERT ON CITAS
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_CITAS (
        ID_CITA,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_CITA,
        'INSERT',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para UPDATE en CITAS
CREATE OR REPLACE TRIGGER trg_auditoria_citas_update
AFTER UPDATE ON CITAS
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_CITAS (
        ID_CITA,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_CITA,
        'UPDATE',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para DELETE en CITAS
CREATE OR REPLACE TRIGGER trg_auditoria_citas_delete
AFTER DELETE ON CITAS
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_CITAS (
        ID_CITA,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :OLD.ID_CITA,
        'DELETE',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para INSERT en PAGOS
CREATE OR REPLACE TRIGGER trg_auditoria_pagos_insert
AFTER INSERT ON PAGOS
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_PAGOS (
        ID_PAGO,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_PAGO,
        'INSERT',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para UPDATE en PAGOS
CREATE OR REPLACE TRIGGER trg_auditoria_pagos_update
AFTER UPDATE ON PAGOS
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_PAGOS (
        ID_PAGO,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_PAGO,
        'UPDATE',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para DELETE en PAGOS
CREATE OR REPLACE TRIGGER trg_auditoria_pagos_delete
AFTER DELETE ON PAGOS
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_PAGOS (
        ID_PAGO,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :OLD.ID_PAGO,
        'DELETE',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para INSERT en EXPEDIENTES
CREATE OR REPLACE TRIGGER trg_auditoria_expedientes_insert
AFTER INSERT ON EXPEDIENTES
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_EXPEDIENTES (
        ID_EXPEDIENTE,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_EXPEDIENTE,
        'INSERT',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para UPDATE en EXPEDIENTES
CREATE OR REPLACE TRIGGER trg_auditoria_expedientes_update
AFTER UPDATE ON EXPEDIENTES
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_EXPEDIENTES (
        ID_EXPEDIENTE,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :NEW.ID_EXPEDIENTE,
        'UPDATE',
        SYSDATE,
        USER
    );
END;
/

-- Trigger para DELETE en EXPEDIENTES
CREATE OR REPLACE TRIGGER trg_auditoria_expedientes_delete
AFTER DELETE ON EXPEDIENTES
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_EXPEDIENTES (
        ID_EXPEDIENTE,
        ACCION,
        FECHA_AUDITORIA,
        USUARIO
    ) VALUES (
        :OLD.ID_EXPEDIENTE,
        'DELETE',
        SYSDATE,
        USER
    );
END;

/*-----------------------------CREACION DE INDICES----------------------------*/
CREATE INDEX IDX_CLIENTE_NOMBRE ON CLIENTE(NOMBRE); 
CREATE INDEX IDX_CITA_FECHA ON CITAS(FECHA_CITA); 
CREATE INDEX IDX_PAGO_CLIENTE ON PAGOS(ID_CLIENTE); 
/

/*----------------------DEFINICION DE PERMISOS Y ACCESOS----------------------*/
-- RL_ADMIN
GRANT ALL PRIVILEGES ON CLIENTE TO RL_ADMIN;
GRANT ALL PRIVILEGES ON TERAPEUTA TO RL_ADMIN;
GRANT ALL PRIVILEGES ON TERAPIA TO RL_ADMIN;
GRANT ALL PRIVILEGES ON CITAS TO RL_ADMIN;
GRANT ALL PRIVILEGES ON PAGOS TO RL_ADMIN;
GRANT ALL PRIVILEGES ON EXPEDIENTES TO RL_ADMIN;
GRANT CREATE SESSION, CREATE TABLE, CREATE VIEW, CREATE PROCEDURE,
      CREATE SEQUENCE, CREATE TRIGGER TO RL_ADMIN;
/

-- RL_TERAPEUTA
GRANT SELECT, INSERT ON CITAS TO RL_TERAPEUTA;
GRANT SELECT, INSERT ON EXPEDIENTES TO RL_TERAPEUTA;
GRANT RL_TERAPEUTA TO USR_TERRY;
/

-- RL_DIRECTOR
GRANT SELECT ON CLIENTE TO RL_DIRECTOR;
GRANT SELECT ON TERAPEUTA TO RL_DIRECTOR;
GRANT SELECT ON TERAPIA TO RL_DIRECTOR;
GRANT SELECT ON CITAS TO RL_DIRECTOR;
GRANT SELECT ON PAGOS TO RL_DIRECTOR;
GRANT SELECT ON EXPEDIENTES TO RL_DIRECTOR;
GRANT CREATE SESSION TO RL_DIRECTOR;
GRANT RL_DIRECTOR TO USR_DIANA;
/